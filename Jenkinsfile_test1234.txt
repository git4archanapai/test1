pipeline {
     agent {
             label 'estore_node'

  }
     options { timestamps () }
    stages{


      stage('Unit Test') {
            when { anyOf { branch 'hotfix/*';  branch 'develop'; branch 'release/*' ; branch 'feature/*'} }
                 steps {
                    catchError {
                                echo "Initiating Unit Testing"
                                sh '''
                                sed -i -e "s/sonar.projectVersion.*/sonar.projectVersion=`pwd | awk -F '/' '{ print $5 }'`/g" sonar-project.properties
                                path=`echo $PWD`
                                cd $path
                                cp /opt/estore/dev/magentoEE/auth/auth.json $path
                                cp /opt/estore/dev/magentoEE/config/env.php $path/app/etc/
                                composer install
                                chown -R estore:estore *
                                php bin/magento dev:test:run unit
                                '''
                                echo "Unit Testing Completed"

                              }
                    echo currentBuild.result
                       }

              } 

	    stage('Sonar-scanning') {
		 when { anyOf { branch 'hotfix/*';  branch 'develop'; branch 'release/*' ; branch 'feature/*'} }
            steps {
                   script{
                     catchError {
                     		echo "Initiating Static Code Review"
                            withSonarQubeEnv('SonarQube'){
                                               sh '''
                                                /opt/sonar/sonar-scanner/bin/sonar-scanner -X
                                                cp -rf /opt/estore/sonarbot/sonar_bot.py .
                                                /opt/estore/sonarbot/env/bin/python sonar_bot.py sonar-project.properties
                                               '''

                }
             }
 			 echo currentBuild.result

              }
            }
        }  
       /*stage("Quality Gate") {
            steps {
                timeout(time: 1, unit: 'HOURS') {

                    waitForQualityGate abortPipeline: true
                }
            }
        }*/  

		stage('Deployment on DEV-Estore-01') {
		 when { anyOf { branch 'feature/*';  branch 'develop'; branch 'release/*'; branch 'hotfix/*'} }
            steps {
                   script{
                     catchError {
                    timeout(time: 60, unit: "MINUTES") {
                     echo "Need Approval for initiating the developement environment build"
                     performSITDeployment = input(id: 'userInput', message: "Click on Proceed to Continue or Abort to terminate the flow",
                     parameters: [booleanParam(defaultValue: false, description: 'Select Yes to proceed Deployment in DEV', name: 'Yes')])
                if(performSITDeployment){
               echo "Approved build"
                    sh '/opt/estore/dev/magentoEE/estore_magentoEE_dev_packaging.sh'
                    //sh '/opt/estore/dev_gtm/magentoEE/estore_magentoEE_dev_packaging.sh'
                    echo "Deploying the development environment"
                    sh '/opt/estore/dev/magentoEE/estore_magentoEE_ssh_deployment.sh'
                    //sh '/opt/estore/dev_gtm/magentoEE/estore_magentoEE_ssh_deployment.sh'
                    echo "Deployed the build"
                }else{
                	echo 'Skipping - Build & Deploy to Testing'
                }
             }
          }
 			 echo currentBuild.result

              }
            }
        }

      stage('Deployment on DEV-Estore-01-GTM') {
		 when { anyOf { branch 'feature/*';  branch 'develop'; branch 'release/*'; branch 'hotfix/*'} }
            steps {
                   script{
                     catchError {
                    timeout(time: 60, unit: "MINUTES") {
                     echo "Need Approval for initiating the developement environment build"
                     performSITDeployment = input(id: 'userInput', message: "Click on Proceed to Continue or Abort to terminate the flow",
                     parameters: [booleanParam(defaultValue: false, description: 'Select Yes to proceed Deployment in DEV', name: 'Yes')])
                if(performSITDeployment){
               echo "Approved build"
                    //sh '/opt/estore/dev/magentoEE/estore_magentoEE_dev_packaging.sh'
                    sh '/opt/estore/dev_gtm/magentoEE/estore_magentoEE_dev_packaging.sh'
                    echo "Deploying the development environment"
                    //sh '/opt/estore/dev/magentoEE/estore_magentoEE_ssh_deployment.sh'
                    sh '/opt/estore/dev_gtm/magentoEE/estore_magentoEE_ssh_deployment.sh'
                    echo "Deployed the build"
                }else{
                	echo 'Skipping - Build & Deploy to Testing'
                }
             }
          }
 			 echo currentBuild.result

              }
            }
        }

       stage('Deployment on SIT-Estore-02') {
		 when { anyOf { branch 'develop' ; branch 'release/*';  branch 'hotfix/*'} }
            steps {
                   script{
                     catchError {
                     timeout(time: 60, unit: "MINUTES") {
                     echo "Need Approval for initiating the SIT deployment "
                     performSITDeployment = input(id: 'userInput', message: "Click on Proceed to Continue or Abort to terminate the flow",
                     parameters: [booleanParam(defaultValue: false, description: 'Select Yes to proceed Deployment in SIT', name: 'Yes')])
                if(performSITDeployment){
               echo "Approved build"
                    sh '/opt/estore/sit/magentoEE/estore_magentoEE_sit_packaging.sh'
                    echo "Deploying the SIT environment"
                    sh '/opt/estore/sit/magentoEE/estore_magentoEE_ssh_deployment.sh'
                    echo "Deployed the build"
                }else{
                	echo 'Skipping - Build & Deploy to Testing'
                }
             }
          }
 			 echo currentBuild.result

              }
            }
        }
      
      stage('Deployment on SIT-Estore-02-GTM') {
		 when { anyOf { branch 'develop' ; branch 'release/*';  branch 'hotfix/*'} }
            steps {
                   script{
                     catchError {
                     timeout(time: 60, unit: "MINUTES") {
                     echo "Need Approval for initiating the SIT deployment "
                     performSITDeployment = input(id: 'userInput', message: "Click on Proceed to Continue or Abort to terminate the flow",
                     parameters: [booleanParam(defaultValue: false, description: 'Select Yes to proceed Deployment in SIT', name: 'Yes')])
                if(performSITDeployment){
               echo "Approved build"
                    sh '/opt/estore/sit_gtm/magentoEE/estore_magentoEE_sit_packaging.sh'
                    echo "Deploying the SIT environment"
                    sh '/opt/estore/sit_gtm/magentoEE/estore_magentoEE_ssh_deployment.sh'
                    echo "Deployed the build"
                }else{
                	echo 'Skipping - Build & Deploy to Testing'
                }
             }
          }
 			 echo currentBuild.result

              }
            }
        }
		stage('Deployment on SIT2-Estore-04') {
		 when { anyOf { branch 'develop' ; branch 'release/*';  branch 'hotfix/*'} }
            steps {
                   script{
                     catchError {
                     timeout(time: 60, unit: "MINUTES") {
                     echo "Need Approval for initiating the SIT2-Estore-04 deployment "
                     performSITDeployment = input(id: 'userInput', message: "Click on Proceed to Continue or Abort to terminate the flow",
                     parameters: [booleanParam(defaultValue: false, description: 'Select Yes to proceed Deployment in SIT2-Estore-04', name: 'Yes')])
                if(performSITDeployment){
               echo "Approved build"
                    sh '/opt/estore/sit2/magentoEE/estore_magentoEE_sit2_packaging.sh'
                    echo "Deploying the SIT environment"
                    sh '/opt/estore/sit2/magentoEE/estore_magentoEE_ssh_deployment.sh'
                    echo "Deployed the build"
                }else{
                	echo 'Skipping - Build & Deploy to Testing'
                }
             }
          }
 			 echo currentBuild.result

              }
            }
        }
      
      stage('Deployment on SIT2-Estore-04-GTM') {
		 when { anyOf { branch 'develop' ; branch 'release/*';  branch 'hotfix/*'} }
            steps {
                   script{
                     catchError {
                     timeout(time: 60, unit: "MINUTES") {
                     echo "Need Approval for initiating the SIT2-Estore-04 deployment "
                     performSITDeployment = input(id: 'userInput', message: "Click on Proceed to Continue or Abort to terminate the flow",
                     parameters: [booleanParam(defaultValue: false, description: 'Select Yes to proceed Deployment in SIT2-Estore-04', name: 'Yes')])
                if(performSITDeployment){
               echo "Approved build"
                    sh '/opt/estore/sit2_gtm/magentoEE/estore_magentoEE_sit2_packaging.sh'
                    echo "Deploying the SIT environment"
                    sh '/opt/estore/sit2_gtm/magentoEE/estore_magentoEE_ssh_deployment.sh'
                    echo "Deployed the build"
                }else{
                	echo 'Skipping - Build & Deploy to Testing'
                }
             }
          }
 			 echo currentBuild.result

              }
            }
        }

      stage('Deployment on UAT-Estore-03') {
            when { anyOf {branch 'hotfix/*';branch 'release/*'} }
           steps {
               script{
                  catchError {
                     timeout(time: 60, unit: "MINUTES") {
                     echo "Need Approval for initiating the UAT build"
                     performUATDeployment = input(id: 'userInput', message: "Click on Proceed to Continue or Abort to terminate the flow",
                     parameters: [booleanParam(defaultValue: false, description: 'Select Yes to proceed Deployment in UAT', name: 'Yes')])
                	 if(performUATDeployment){
                  						echo "Approved build"
              							sh '/opt/estore/preprod/magentoEE/estore_magentoEE_preprod_packaging.sh'
										sh '/opt/estore/preprod/magentoEE/estore_magentoEE_preprod_ssh_deploy.sh'

                    					echo "imaging and Rolling update "
                    					sh '/opt/estore/preprod/magentoEE/estore_magentoEE_preprod_rolling_update.sh'
                						echo "Deployed the build"
                						}else{
                                		echo'Skipping - Build & Deploy to UAT'
                						}
                     		}
                  }
 							echo currentBuild.result

                	}

        		}
        }
		stage('Deployment on PPMS-Estore-05') {
		    when { anyOf { branch 'develop' ; branch 'release/*';  branch 'hotfix/*'} }
            steps {
                   script{
                     catchError {
                     timeout(time: 60, unit: "MINUTES") {
                     echo "Need Approval for initiating the PPMS-05 deployment "
                     performSITDeployment = input(id: 'userInput', message: "Click on Proceed to Continue or Abort to terminate the flow",
                     parameters: [booleanParam(defaultValue: false, description: 'Select Yes to proceed Deployment in PPMS-Estore-05', name: 'Yes')])
                if(performSITDeployment){
               echo "Approved build"
                    sh '/opt/estore/ppms_dev/magentoEE/estore_magentoEE_sit_packaging.sh'
                    echo "Deploying the PPMS-05 environment"
                    sh '/opt/estore/ppms_dev/magentoEE/estore_magentoEE_ssh_deployment.sh'
                    echo "Deployed the build"
                }else{
                	echo 'Skipping - Build & Deploy to Testing'
                }
             }
          }
 			 echo currentBuild.result

              }
            }
        }      
 		stage('Deployment on PPMS-Estore-06') {
		    when { anyOf { branch 'develop' ; branch 'release/*';  branch 'hotfix/*'} }
            steps {
                   script{
                     catchError {
                     timeout(time: 60, unit: "MINUTES") {
                     echo "Need Approval for initiating the PPMS deployment "
                     performSITDeployment = input(id: 'userInput', message: "Click on Proceed to Continue or Abort to terminate the flow",
                     parameters: [booleanParam(defaultValue: false, description: 'Select Yes to proceed Deployment in PPMS-Estore-06', name: 'Yes')])
                if(performSITDeployment){
               echo "Approved build"
                    sh '/opt/estore/ppms_qa/magentoEE/estore_magentoEE_sit_packaging.sh'
                    echo "Deploying the SIT environment"
                    sh '/opt/estore/ppms_qa/magentoEE/estore_magentoEE_ssh_deployment.sh'
                    echo "Deployed the build"
                }else{
                	echo 'Skipping - Build & Deploy to Testing'
                }
             }
          }
 			 echo currentBuild.result

              }
            }
        }      
        stage('Functional Testing') {
            when { anyOf {  branch 'feature/*';  branch 'develop'; branch 'release/*';  branch 'hotfix/*'}}
            steps {
               script{
                 catchError {
                     timeout(time: 15, unit: "MINUTES") {
                     echo "Need Approval for initiating Funtional Testing"
                     performFT = input(id: 'userInput', message: "Click on Proceed to Continue or Abort to terminate the flow",
                     parameters: [booleanParam(defaultValue: false, description: 'Select Yes to proceed Funtional Testing', name: 'Yes')])
                if(performFT){
                node('ft_node') {
              	 bat '''call C:
				call cd C:\\CelcomProject\\Drop3\\workspace\\Celcom_Automation
				call
				java -cp Drop3.jar;C:\\CelcomProject\\Drop3\\workspace\\Celcom_Automation\\Drop3_lib\\*;. cbf.harness.Main -configfilepath C:\\CelcomProject\\Drop3\\workspace\\Celcom_Automation\\Projects\\celcomPOC\\Plan\\ExcelConfig.xml -testsetfile TestSet.xls  -testsetsheet TestSet -browser CHROME
                call cd\\
				call C:
				call cd C:\\CelcomProject\\Drop3\\workspace\\Celcom_Automation\\src
				javac ConsolidatedReportDrop3.java
				java ConsolidatedReportDrop3
               call cd\\
               call C:
               call cd jenkins_slave\\workspace\\ReportPath_drop3
               call cd
                '''
             // echo "Loading Artifacts"
             // archiveArtifacts artifacts:'..\\ReportPath_drop3\\TestSet.html', fingerprint: true
			      echo "Functional Testing Completed"
              }
                }else{
                	echo 'Skipping - FT'

                }
              }
            }
 			 echo currentBuild.result
               }
            }

        }

       stage('Performance Testing') {
            when { anyOf {branch 'hotfix/*';branch 'release/*';} }
            steps {
               echo "Need approval to Performance Testing"
               script{
                 catchError {
                         timeout(time: 15, unit: "MINUTES") {
                         performTesting = input(id: 'userInput', message: "Click on Proceed to Continue or Abort to terminate the flow",
                         parameters: [booleanParam(defaultValue: false, description: 'Select Yes for executing Performance testing', name: 'Yes')])

                    if(performTesting){
                      node('pt_node') {
                           echo "Executing PT"

                           bat ''' call C:
                                   call C:\\PerformanceTesting\\apache-jmeter-3.3\\bin\\jmeter.bat -Jjmeter.save.saveservice.output_format=xml -n -t C:\\PerformanceTesting\\Portalsite\\NewcodeBetadeployement.jmx -lNewcodeBetadeployement.jtl
                               '''
                               archiveArtifacts artifacts:'NewcodeBetadeployement.jtl', fingerprint: true
                               perfReport modeEvaluation: true, percentiles: '0,50,90,100', sourceDataFiles: 'NewcodeBetadeployement.jtl'
                               perfReport constraints: [absolute(escalationLevel: 'INFORMATION', meteredValue: 'AVERAGE', operator: 'NOT_GREATER', relatedPerfReport: 'NewcodeBetadeployement.jtl', success: false, value: 0), relative(escalationLevel: 'INFORMATION', meteredValue: 'AVERAGE', operator: 'NOT_GREATER', previousResultsBlock: previous(previousResultsString: '34', value: 'true'), relatedPerfReport: 'NewcodeBetadeployement.jtl', success: false, tolerance: 0.0)], modeEvaluation: true, percentiles: '0,50,90,100', sourceDataFiles: '**\\*.jtl'
                               step([$class: 'ArtifactArchiver', artifacts: 'NewcodeBetadeployement.jtl'])
                              }
                              }else{
                                   echo "Skipping PT"
                                }
                             }
                 }
                             echo currentBuild.result
                      }
                        echo "Performance Testing Completed"
                }
        }
        stage('Build & Deploy To Production') {
            when { anyOf {branch 'hotfix/*'; branch 'release/*'} }
            steps {
                //echo "Need approval to Deploy"
              script{
                 catchError {
                            timeout(time: 60, unit: "MINUTES") {
                     		echo "Need Approval for initiating  Production build"
                     		performPRODDeployment = input(id: 'userInput', message: "Click on Proceed to Continue or Abort to terminate the flow", submitter: "vinod,hareesh",
                     		parameters: [booleanParam(defaultValue: false, description: 'Select Yes to proceed Deployment in  Production', name: 'Yes')])
                			if(performPRODDeployment){
                								      echo "Approved build & started packaging"
                                                      sh '/opt/estore/prod/magentoEE/estore_magentoEE_prod_packaging.sh'
										              echo "imaging and Rolling update "
                    					              sh '/opt/estore/prod/magentoEE/estore_magentoEE_prod_rolling_update.sh'
                						              echo "Deployed the build"

                                                      }else {
                                                      		echo 'Skipping - Build & Deploy To Production'
                                                      }
                   		   }
                 }
 						   echo currentBuild.result
                   }
       			 }
				}
		}


  post {
        always {
            echo 'One way or another, I have finished'
            //deleteDir() /* clean up our workspace */
           // emailext recipientProviders: [requestor(), brokenBuildSuspects()], subject: 'Jenkins Portal Build - ${env.BUILD_ID}', to: 'murali.ts@gmail.com'
            emailext body: '''$PROJECT_NAME - Build # $BUILD_NUMBER - $BUILD_STATUS:

                            Check console output at $BUILD_URL to view the results.''', recipientProviders: [requestor()], subject: '$PROJECT_NAME - Build # $BUILD_NUMBER - $BUILD_STATUS!', to: ''


        }
        success {
            echo 'I succeeeded!'
           emailext body: '''$PROJECT_NAME - Build # $BUILD_NUMBER - $BUILD_STATUS:

                            Check console output at $BUILD_URL to view the results.''', recipientProviders: [developers()], subject: '$PROJECT_NAME - Build # $BUILD_NUMBER - $BUILD_STATUS!', to: ''
        }
        unstable {
            echo 'I am unstable :/'
        }
        failure {
            echo 'I failed'
           emailext body: '''$PROJECT_NAME - Build # $BUILD_NUMBER - $BUILD_STATUS:

                            Check console output at $BUILD_URL to view the results.''', recipientProviders: [culprits()],subject: '$PROJECT_NAME - Build # $BUILD_NUMBER - $BUILD_STATUS!', to: ''
        }
        changed {
            echo 'Things were different before...'
        }
    }
}